{"ast":null,"code":"var _jsxFileName = \"/home/shan/Desktop/TT/TopTunes/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // define states\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState(\"\");\n  const [user, setUser] = useState(null); // Initialize with null or an empty object\n\n  // on mount: grab token stored in local storage\n  useEffect(() => {\n    // retrieves the current URL hash portion\n    const hash = window.location.hash;\n    // attempts to retrieve a token from the browser's local storage\n    let token = window.localStorage.getItem(\"token\");\n    if (!token && hash) {\n      token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n      window.location.hash = \"\";\n      window.localStorage.setItem(\"token\", token);\n    }\n    setToken(token);\n  }, []);\n\n  // function to update tracklist, will be called by TopSongs.js after getting results\n  const updateTracklist = array => {\n    setTracklist(array);\n  };\n\n  // function to add tracks to playlist, will be called from Track.js\n  const addToPlaylist = newTrack => {\n    // check if newTrack is already in playlist\n    if (playlist.some(t => t.id === newTrack.id)) {} else {\n      setPlaylist(prev => [...prev, newTrack]); // if not, it will be added\n    }\n  };\n\n  // function to remove tracks from playlist, will be called from Track.js\n  const removeFromPlaylist = trackId => {\n    setPlaylist(prev => prev.filter(n => n.id !== trackId));\n  };\n\n  // function to get user data\n  const currentUser = async () => {\n    try {\n      const response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n        throw new Error('Network response was not ok');\n      }\n      const userData = await response.json();\n      return userData;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const fetchCurrentUser = useCallback(async () => {}, []);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const userData = await fetchCurrentUser();\n        setUser(userData);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    if (token) {\n      fetchUserData();\n    }\n  }, [token, fetchCurrentUser]);\n  const createPlaylist = async (userId, playlistName, token) => {\n    try {\n      let playlistId;\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: \"New playlist created by app\",\n          public: false\n        })\n      });\n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id;\n      let uriArray = playlist.map(track => track.uri);\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray,\n          position: 0\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n      setPlaylist([]); // reset playlist after successful playlist creation\n      setPlaylistName('');\n      alert(`Your playlist ${playlistName} was successfully created!`); // notify the user of successful playlist creation\n\n      return addTracksResponse.json();\n    } catch (error) {\n      throw error; // Handle or rethrow the error as needed\n    }\n  };\n\n  // Logout function\n  const userProfileClickHandler = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TopTunes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInfo\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: userProfileClickHandler,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: user ? user.name : 'Logour'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 55\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TopSongs, {\n      token: token,\n      updateTracklist: updateTracklist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), token ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(Tracklist, {\n        data: tracklist,\n        addToPlaylist: addToPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        className: \"flexItem\",\n        playlist: playlist,\n        data: tracklist,\n        removeFromPlaylist: removeFromPlaylist,\n        setPlaylistName: setPlaylistName,\n        playlistName: playlistName,\n        currentUser: currentUser,\n        createPlaylist: createPlaylist,\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"3I5zIBFQzTY8rOVBnjMyEZixe08=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TopSongs","Playlist","Tracklist","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","tracklist","setTracklist","playlist","setPlaylist","playlistName","setPlaylistName","token","setToken","user","setUser","hash","window","location","localStorage","getItem","substring","split","find","elem","startsWith","setItem","updateTracklist","array","addToPlaylist","newTrack","some","t","id","prev","removeFromPlaylist","trackId","filter","n","currentUser","response","fetch","method","headers","Authorization","ok","removeItem","reload","Error","userData","json","error","fetchCurrentUser","fetchUserData","console","createPlaylist","userId","playlistId","createResponse","body","JSON","stringify","name","description","public","createJsonResponse","uriArray","map","track","uri","addTracksResponse","uris","position","alert","userProfileClickHandler","className","style","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","data","_c","$RefreshReg$"],"sources":["/home/shan/Desktop/TT/TopTunes/src/App.js"],"sourcesContent":["\n    import './App.css';\n    import TopSongs from './components/topsongs/TopSongs';\n    import Playlist from './components/playlist/Playlist';\n    import Tracklist from './components/tracklist/Tracklist';\n    import { useState, useEffect, useCallback } from 'react';\n\n\n    function App() {\n    // define states\n    const [tracklist, setTracklist] = useState([]);\n    const [playlist, setPlaylist] = useState([]);\n    const [playlistName, setPlaylistName] = useState('');\n    const [token, setToken] = useState(\"\")\n    const [user, setUser] = useState(null); // Initialize with null or an empty object\n    \n\n\n    // on mount: grab token stored in local storage\n    useEffect(() => {\n        // retrieves the current URL hash portion\n        const hash = window.location.hash\n        // attempts to retrieve a token from the browser's local storage\n        let token = window.localStorage.getItem(\"token\")\n\n        if (!token && hash) {\n            token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1]\n\n            window.location.hash = \"\"\n            window.localStorage.setItem(\"token\", token)\n        } \n        setToken(token)\n\n    }, [])\n    \n    // function to update tracklist, will be called by TopSongs.js after getting results\n    const updateTracklist = (array) => {\n        setTracklist(array);\n    }\n\n    // function to add tracks to playlist, will be called from Track.js\n    const addToPlaylist = (newTrack) => {\n        // check if newTrack is already in playlist\n        if (playlist.some((t) => t.id === newTrack.id)) {\n        } else {\n        setPlaylist((prev) => [...prev, newTrack]); // if not, it will be added\n        }\n        \n    };\n\n    // function to remove tracks from playlist, will be called from Track.js\n    const removeFromPlaylist = (trackId) => {\n        setPlaylist((prev) => prev.filter(n => n.id !== trackId));\n    };\n\n    // function to get user data\n    const currentUser = async () => {\n        try {\n        const response = await fetch('https://api.spotify.com/v1/me', {\n            method: 'GET',\n            headers: {\n            Authorization: `Bearer ${token}`\n            }\n        });\n    \n        if (!response.ok) {\n            localStorage.removeItem(\"token\");\n            window.location.reload(); \n            throw new Error('Network response was not ok');\n        }\n    \n        const userData = await response.json();\n        return userData; \n\n        } catch (error) {\n        throw error; \n        }\n    }\n\n        const fetchCurrentUser  = useCallback(async () => {\n        }, []); \n\n\n        useEffect(() => {\n        const fetchUserData = async () => {\n            try {\n            const userData = await fetchCurrentUser ();\n            setUser(userData);\n            } catch (error) {\n            console.error('Error fetching user data:', error);\n            }\n        };\n\n        if (token) {\n            fetchUserData();\n        }\n        }, [token, fetchCurrentUser]);\n    \n    \n    const createPlaylist = async (userId, playlistName, token) => {\n        try {\n        let playlistId; \n    \n        const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            name: playlistName,\n            description: \"New playlist created by app\",\n            public: false\n            })\n        });\n    \n        if (!createResponse.ok) {\n            throw new Error('Error in createPlaylist. Network response was not ok');\n        }\n    \n        const createJsonResponse = await createResponse.json();\n        playlistId = createJsonResponse.id; \n    \n        let uriArray = playlist.map(track => track.uri); \n    \n        const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n            method: 'POST',\n            headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n            uris: uriArray, \n            position: 0,\n            })\n        });\n    \n        if (!addTracksResponse.ok) {\n            throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n        }\n    \n        setPlaylist([]); // reset playlist after successful playlist creation\n        setPlaylistName(''); \n    \n        alert(`Your playlist ${playlistName} was successfully created!`); // notify the user of successful playlist creation\n    \n        return addTracksResponse.json();\n        } catch (error) {\n        throw error; // Handle or rethrow the error as needed\n        }\n    }\n\n    // Logout function\n    const userProfileClickHandler = () => {\n        localStorage.removeItem(\"token\");\n        window.location.reload();   \n    }\n\n    return (\n        <div className=\"App\" style={{minHeight: '100vh'}}>\n        <div className=\"title\">\n            <h1>TopTunes</h1>\n            <div className='userInfo'>\n            \n            <button onClick={userProfileClickHandler}><b>{user ? user.name : 'Logour'}</b></button>\n            </div>\n        </div>\n        <TopSongs token={token} updateTracklist={updateTracklist} />\n        {token ? (\n            <div className='flex'>\n            <Tracklist data={tracklist} addToPlaylist={addToPlaylist} />\n            <Playlist\n                className='flexItem'\n                playlist={playlist}\n                data={tracklist}\n                removeFromPlaylist={removeFromPlaylist}\n                setPlaylistName={setPlaylistName}\n                playlistName={playlistName}\n                currentUser={currentUser}\n                createPlaylist={createPlaylist}\n                token={token} />\n            </div>\n        )\n            :\n            ''\n        }\n        \n        </div>\n    );\n    }\n\n    export default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}