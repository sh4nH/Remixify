{"ast":null,"code":"var _jsxFileName = \"/home/shan/Desktop/TT/TopTunes/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // define states\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState(\"\");\n  useEffect(() => {\n    const hash = window.location.hash;\n    let token = window.localStorage.getItem(\"token\");\n    if (!token && hash) {\n      token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n      window.location.hash = \"\";\n      window.localStorage.setItem(\"token\", token);\n    }\n    setToken(token);\n  }, []);\n  const updateTracklist = array => {\n    setTracklist(array);\n  };\n  const addToPlaylist = newTrack => {\n    if (playlist.some(t => t.id === newTrack.id)) {} else {\n      setPlaylist(prev => [...prev, newTrack]);\n    }\n  };\n  const removeFromPlaylist = trackId => {\n    setPlaylist(prev => prev.filter(n => n.id !== trackId));\n  };\n  const currentUser = async () => {\n    try {\n      const response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n        throw new Error('Network response was not ok');\n      }\n      const userData = await response.json();\n      return userData;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // const fetchCurrentUser  = useCallback(async () => {\n  // }, []); \n\n  // useEffect(() => {\n  //   const fetchUserData = async () => {\n  //     try {\n  //       const userData = await fetchCurrentUser ();\n  //       setUser(userData);\n  //     } catch (error) {\n  //       console.error('Error fetching user data:', error);\n  //     }\n  //   };\n\n  //   if (token) {\n  //     fetchUserData();\n  //   }\n  // }, [token, fetchCurrentUser]);\n\n  // Function to create a playlist (assuming you have the user's ID)\n  const createPlaylist = async (userId, playlistName, token) => {\n    try {\n      let playlistId; // initialize variable to store playlist id\n\n      // Create the playlist\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: \"New playlist created by app\",\n          public: false\n        })\n      });\n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id;\n      let uriArray = playlist.map(track => track.uri);\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray,\n          position: 0\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n      setPlaylist([]);\n      setPlaylistName('');\n      alert(`Your playlist ${playlistName} was successfully created!`);\n      return addTracksResponse.json();\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // // Logout function\n  // const Logout = () => {\n  //   localStorage.removeItem(\"token\");\n  //   window.location.reload();   \n  // }\n\n  const saveTrack = async trackId => {\n    let curToken = token;\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/tracks?ids=${trackId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${curToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: [trackId]\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error saving track');\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"TopTunes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create a playlist with your top songs on Spotify.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dive into your top 20 songs, curate a playlist that speaks to your soul.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopSongs, {\n      token: token,\n      updateTracklist: updateTracklist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), token ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(Tracklist, {\n        data: tracklist,\n        addToPlaylist: addToPlaylist,\n        saveTrack: saveTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        className: \"flexItem\",\n        playlist: playlist,\n        data: tracklist,\n        removeFromPlaylist: removeFromPlaylist,\n        setPlaylistName: setPlaylistName,\n        playlistName: playlistName,\n        currentUser: currentUser,\n        createPlaylist: createPlaylist,\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"93QGcy0+iQixiyYRncT3Rr0ld0k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TopSongs","Playlist","Tracklist","useState","useEffect","jsxDEV","_jsxDEV","App","_s","tracklist","setTracklist","playlist","setPlaylist","playlistName","setPlaylistName","token","setToken","hash","window","location","localStorage","getItem","substring","split","find","elem","startsWith","setItem","updateTracklist","array","addToPlaylist","newTrack","some","t","id","prev","removeFromPlaylist","trackId","filter","n","currentUser","response","fetch","method","headers","Authorization","ok","removeItem","reload","Error","userData","json","error","createPlaylist","userId","playlistId","createResponse","body","JSON","stringify","name","description","public","createJsonResponse","uriArray","map","track","uri","addTracksResponse","uris","position","alert","saveTrack","curToken","ids","className","style","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/shan/Desktop/TT/TopTunes/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect } from 'react';\n\n\nfunction App() {\n  // define states\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState(\"\")\n\n\n  useEffect(() => {\n    const hash = window.location.hash\n    let token = window.localStorage.getItem(\"token\")\n\n    if (!token && hash) {\n        token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1]\n\n        window.location.hash = \"\"\n        window.localStorage.setItem(\"token\", token)\n    } \n    setToken(token)\n\n  }, [])\n  \n  const updateTracklist = (array) => {\n    setTracklist(array);\n  }\n\n  const addToPlaylist = (newTrack) => {\n    if (playlist.some((t) => t.id === newTrack.id)) {\n    } else {\n      setPlaylist((prev) => [...prev, newTrack]); \n    }\n    \n  };\n\n  const removeFromPlaylist = (trackId) => {\n    setPlaylist((prev) => prev.filter(n => n.id !== trackId));\n  };\n\n  const currentUser = async () => {\n    try {\n      const response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n  \n      if (!response.ok) {\n        localStorage.removeItem(\"token\");\n        window.location.reload(); \n        throw new Error('Network response was not ok');\n      }\n  \n      const userData = await response.json();\n      return userData; \n\n    } catch (error) {\n      throw error; \n    }\n  }\n\n    // const fetchCurrentUser  = useCallback(async () => {\n    // }, []); \n\n\n    // useEffect(() => {\n    //   const fetchUserData = async () => {\n    //     try {\n    //       const userData = await fetchCurrentUser ();\n    //       setUser(userData);\n    //     } catch (error) {\n    //       console.error('Error fetching user data:', error);\n    //     }\n    //   };\n\n    //   if (token) {\n    //     fetchUserData();\n    //   }\n    // }, [token, fetchCurrentUser]);\n  \n \n  // Function to create a playlist (assuming you have the user's ID)\n  const createPlaylist = async (userId, playlistName, token) => {\n    try {\n      let playlistId; // initialize variable to store playlist id\n  \n      // Create the playlist\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: \"New playlist created by app\",\n          public: false\n        })\n      });\n  \n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n  \n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id; \n  \n      let uriArray = playlist.map(track => track.uri); \n  \n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray, \n          position: 0,\n        })\n      });\n  \n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n  \n      setPlaylist([]); \n      setPlaylistName(''); \n  \n      alert(`Your playlist ${playlistName} was successfully created!`); \n  \n      return addTracksResponse.json();\n    } catch (error) {\n      throw error; \n    }\n  }\n\n  // // Logout function\n  // const Logout = () => {\n  //   localStorage.removeItem(\"token\");\n  //   window.location.reload();   \n  // }\n\n  const saveTrack = async (trackId) => {\n    \n    let curToken = token;\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/tracks?ids=${trackId}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${curToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ids: [\n            trackId,\n          ],\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error saving track');\n      }\n\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{minHeight: '100vh'}}>\n      <div className=\"title\">\n        <h2>TopTunes</h2>\n        <h1>Create a playlist with your top songs on Spotify.</h1>\n        <h3>Dive into your top 20 songs, curate a playlist that speaks to your soul.</h3>\n        <div className='userInfo'>\n          {/* <button onClick={Logout}><b>{user ? user.display_name : ''}</b></button> */}\n        </div>\n      </div>\n      <TopSongs token={token} updateTracklist={updateTracklist} />\n      {token ? (\n        <div className='flex'>\n          <Tracklist data={tracklist} addToPlaylist={addToPlaylist} saveTrack={saveTrack} />\n          <Playlist\n            className='flexItem'\n            playlist={playlist}\n            data={tracklist}\n            removeFromPlaylist={removeFromPlaylist}\n            setPlaylistName={setPlaylistName}\n            playlistName={playlistName}\n            currentUser={currentUser}\n            createPlaylist={createPlaylist}\n            token={token} />\n        </div>\n      )\n        :\n        ''\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}