{"ast":null,"code":"var _jsxFileName = \"/home/shan/Desktop/TT/TopTunes/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // define states\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState(\"\");\n  const [user, setUser] = useState(null); // Initialize with null or an empty object\n\n  // on mount: grab token stored in local storage\n  useEffect(() => {\n    // retrieves the current URL hash portion\n    const hash = window.location.hash;\n    // attempts to retrieve a token from the browser's local storage\n    let token = window.localStorage.getItem(\"token\");\n    if (!token && hash) {\n      token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1];\n      window.location.hash = \"\";\n      window.localStorage.setItem(\"token\", token);\n    }\n    setToken(token);\n  }, []);\n\n  // function to update tracklist, will be called by TopSongs.js after getting results\n  const updateTracklist = array => {\n    setTracklist(array);\n  };\n\n  // function to add tracks to playlist, will be called from Track.js\n  const addToPlaylist = newTrack => {\n    // check if newTrack is already in playlist\n    if (playlist.some(t => t.id === newTrack.id)) {} else {\n      setPlaylist(prev => [...prev, newTrack]); // if not, it will be added\n    }\n  };\n\n  // function to remove tracks from playlist, will be called from Track.js\n  const removeFromPlaylist = trackId => {\n    setPlaylist(prev => prev.filter(n => n.id !== trackId));\n  };\n\n  //   // function to get user data\n  //   const currentUser = async () => {\n  //     try {\n  //       const response = await fetch('https://api.spotify.com/v1/me', {\n  //         method: 'GET',\n  //         headers: {\n  //           Authorization: `Bearer ${token}`\n  //         }\n  //       });\n\n  //       if (!response.ok) {\n  //         localStorage.removeItem(\"token\");\n  //         window.location.reload(); \n  //         throw new Error('Network response was not ok');\n  //       }\n\n  //       const userData = await response.json();\n  //       return userData; \n\n  //     } catch (error) {\n  //       throw error; \n  //     }\n  //   }\n\n  //   // Define the currentUser function using useCallback\n  //   const fetchCurrentUser  = useCallback(async () => {\n  //     // Your code to fetch user data here\n  //   }, []); // Empty dependency array since currentUser doesn't depend on any props or state\n\n  //   // update the user state\n  //   useEffect(() => {\n  //     const fetchUserData = async () => {\n  //       try {\n  //         const userData = await fetchCurrentUser ();\n  //         setUser(userData);\n  //       } catch (error) {\n  //         // Handle any errors if necessary\n  //         console.error('Error fetching user data:', error);\n  //       }\n  //     };\n\n  //     if (token) {\n  //       fetchUserData();\n  //     }\n  //   }, [token, fetchCurrentUser]);\n\n  // ... (existing code)\n\n  // Function to create a playlist (assuming you have the user's ID)\n  const createPlaylist = async (userId, playlistName, token) => {\n    try {\n      let playlistId; // initialize variable to store playlist id\n\n      // Create the playlist\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: \"New playlist created by app\",\n          public: false\n        })\n      });\n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id; // Store the playlistId\n\n      let uriArray = playlist.map(track => track.uri); // create uriArray based on tracks in playlist\n\n      // Add tracks to the newly created playlist\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray,\n          // array of uris created above\n          position: 0\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n      setPlaylist([]); // reset playlist after successful playlist creation\n      setPlaylistName(''); // reset playlistName after successful playlist creation\n\n      alert(`Your playlist ${playlistName} was successfully created!`); // notify the user of successful playlist creation\n\n      return addTracksResponse.json();\n    } catch (error) {\n      throw error; // Handle or rethrow the error as needed\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TopTunes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"userInfo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopSongs, {\n      token: token,\n      updateTracklist: updateTracklist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), token ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(Tracklist, {\n        data: tracklist,\n        addToPlaylist: addToPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        className: \"flexItem\",\n        playlist: playlist,\n        data: tracklist,\n        removeFromPlaylist: removeFromPlaylist,\n        setPlaylistName: setPlaylistName,\n        playlistName: playlistName,\n        currentUser: currentUser,\n        createPlaylist: createPlaylist,\n        token: token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qEb+NJ7gr/TcFcyQ18wntV1DXBI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TopSongs","Playlist","Tracklist","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","tracklist","setTracklist","playlist","setPlaylist","playlistName","setPlaylistName","token","setToken","user","setUser","hash","window","location","localStorage","getItem","substring","split","find","elem","startsWith","setItem","updateTracklist","array","addToPlaylist","newTrack","some","t","id","prev","removeFromPlaylist","trackId","filter","n","createPlaylist","userId","playlistId","createResponse","fetch","method","headers","body","JSON","stringify","name","description","public","ok","Error","createJsonResponse","json","uriArray","map","track","uri","addTracksResponse","uris","position","alert","error","className","style","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","data","currentUser","_c","$RefreshReg$"],"sources":["/home/shan/Desktop/TT/TopTunes/src/App.js"],"sourcesContent":["import './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect, useCallback } from 'react';\n\nfunction App() {\n  // define states\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState(\"\");\n  const [user, setUser] = useState(null); // Initialize with null or an empty object\n\n  // on mount: grab token stored in local storage\n  useEffect(() => {\n    // retrieves the current URL hash portion\n    const hash = window.location.hash\n    // attempts to retrieve a token from the browser's local storage\n    let token = window.localStorage.getItem(\"token\")\n\n    if (!token && hash) {\n      token = hash.substring(1).split(\"&\").find(elem => elem.startsWith(\"access_token\")).split(\"=\")[1]\n\n      window.location.hash = \"\"\n      window.localStorage.setItem(\"token\", token)\n    } \n    setToken(token);\n\n  }, [])\n\n  // function to update tracklist, will be called by TopSongs.js after getting results\n  const updateTracklist = (array) => {\n    setTracklist(array);\n  }\n\n  // function to add tracks to playlist, will be called from Track.js\n  const addToPlaylist = (newTrack) => {\n    // check if newTrack is already in playlist\n    if (playlist.some((t) => t.id === newTrack.id)) {\n    } else {\n      setPlaylist((prev) => [...prev, newTrack]); // if not, it will be added\n    }\n\n  };\n\n  // function to remove tracks from playlist, will be called from Track.js\n  const removeFromPlaylist = (trackId) => {\n    setPlaylist((prev) => prev.filter(n => n.id !== trackId));\n  };\n\n//   // function to get user data\n//   const currentUser = async () => {\n//     try {\n//       const response = await fetch('https://api.spotify.com/v1/me', {\n//         method: 'GET',\n//         headers: {\n//           Authorization: `Bearer ${token}`\n//         }\n//       });\n\n//       if (!response.ok) {\n//         localStorage.removeItem(\"token\");\n//         window.location.reload(); \n//         throw new Error('Network response was not ok');\n//       }\n\n//       const userData = await response.json();\n//       return userData; \n\n//     } catch (error) {\n//       throw error; \n//     }\n//   }\n\n//   // Define the currentUser function using useCallback\n//   const fetchCurrentUser  = useCallback(async () => {\n//     // Your code to fetch user data here\n//   }, []); // Empty dependency array since currentUser doesn't depend on any props or state\n\n//   // update the user state\n//   useEffect(() => {\n//     const fetchUserData = async () => {\n//       try {\n//         const userData = await fetchCurrentUser ();\n//         setUser(userData);\n//       } catch (error) {\n//         // Handle any errors if necessary\n//         console.error('Error fetching user data:', error);\n//       }\n//     };\n\n//     if (token) {\n//       fetchUserData();\n//     }\n//   }, [token, fetchCurrentUser]);\n\n// ... (existing code)\n\n// Function to create a playlist (assuming you have the user's ID)\nconst createPlaylist = async (userId, playlistName, token) => {\n    try {\n      let playlistId; // initialize variable to store playlist id\n  \n      // Create the playlist\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: \"New playlist created by app\",\n          public: false\n        })\n      });\n  \n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n  \n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id; // Store the playlistId\n  \n      let uriArray = playlist.map(track => track.uri); // create uriArray based on tracks in playlist\n  \n      // Add tracks to the newly created playlist\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray, // array of uris created above\n          position: 0,\n        })\n      });\n  \n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n  \n      setPlaylist([]); // reset playlist after successful playlist creation\n      setPlaylistName(''); // reset playlistName after successful playlist creation\n  \n      alert(`Your playlist ${playlistName} was successfully created!`); // notify the user of successful playlist creation\n  \n      return addTracksResponse.json();\n    } catch (error) {\n      throw error; // Handle or rethrow the error as needed\n    }\n  }\n\n  \n\n  return (\n    <div className=\"App\" style={{minHeight: '100vh'}}>\n      <div className=\"title\">\n        <h1>TopTunes</h1>\n        <div className='userInfo'>\n          \n          {/* {user ? <button><img alt={user.display_name} src={user.images[0].url} /></button> : ''}\n          <button><b>{user ? user.display_name : ''}</b></button> */}\n        </div>\n      </div>\n      <TopSongs token={token} updateTracklist={updateTracklist} />\n      {token ? (\n        <div className='flex'>\n          <Tracklist data={tracklist} addToPlaylist={addToPlaylist} />\n          <Playlist\n            className='flexItem'\n            playlist={playlist}\n            data={tracklist}\n            removeFromPlaylist={removeFromPlaylist}\n            setPlaylistName={setPlaylistName}\n            playlistName={playlistName}\n            currentUser={currentUser}\n            createPlaylist={createPlaylist}\n            token={token} />\n        </div>\n      ) : ''}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,SAAS,MAAM,kCAAkC;AACxD,SAASC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI;IACjC;IACA,IAAIJ,KAAK,GAAGK,MAAM,CAACE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAEhD,IAAI,CAACR,KAAK,IAAII,IAAI,EAAE;MAClBJ,KAAK,GAAGI,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,UAAU,CAAC,cAAc,CAAC,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEhGL,MAAM,CAACC,QAAQ,CAACF,IAAI,GAAG,EAAE;MACzBC,MAAM,CAACE,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;IAC7C;IACAC,QAAQ,CAACD,KAAK,CAAC;EAEjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,eAAe,GAAIC,KAAK,IAAK;IACjCrB,YAAY,CAACqB,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIC,QAAQ,IAAK;IAClC;IACA,IAAItB,QAAQ,CAACuB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKH,QAAQ,CAACG,EAAE,CAAC,EAAE,CAChD,CAAC,MAAM;MACLxB,WAAW,CAAEyB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEJ,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9C;EAEF,CAAC;;EAED;EACA,MAAMK,kBAAkB,GAAIC,OAAO,IAAK;IACtC3B,WAAW,CAAEyB,IAAI,IAAKA,IAAI,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKG,OAAO,CAAC,CAAC;EAC3D,CAAC;;EAEH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;EACA,MAAMG,cAAc,GAAG,MAAAA,CAAOC,MAAM,EAAE9B,YAAY,EAAEE,KAAK,KAAK;IAC1D,IAAI;MACF,IAAI6B,UAAU,CAAC,CAAC;;MAEhB;MACA,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAE,oCAAmCH,MAAO,YAAW,EAAE;QACzFI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAG,UAASjC,KAAM,EAAC;UAClC,cAAc,EAAE;QAClB,CAAC;QACDkC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,IAAI,EAAEvC,YAAY;UAClBwC,WAAW,EAAE,6BAA6B;UAC1CC,MAAM,EAAE;QACV,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACT,cAAc,CAACU,EAAE,EAAE;QACtB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,MAAMC,kBAAkB,GAAG,MAAMZ,cAAc,CAACa,IAAI,CAAC,CAAC;MACtDd,UAAU,GAAGa,kBAAkB,CAACrB,EAAE,CAAC,CAAC;;MAEpC,IAAIuB,QAAQ,GAAGhD,QAAQ,CAACiD,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAMC,iBAAiB,GAAG,MAAMjB,KAAK,CAAE,wCAAuCF,UAAW,SAAQ,EAAE;QACjGG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,eAAe,EAAG,UAASjC,KAAM,EAAC;UAClC,cAAc,EAAE;QAClB,CAAC;QACDkC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBa,IAAI,EAAEL,QAAQ;UAAE;UAChBM,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACF,iBAAiB,CAACR,EAAE,EAAE;QACzB,MAAM,IAAIC,KAAK,CAAC,qEAAqE,CAAC;MACxF;MAEA5C,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACjBE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;;MAErBoD,KAAK,CAAE,iBAAgBrD,YAAa,4BAA2B,CAAC,CAAC,CAAC;;MAElE,OAAOkD,iBAAiB,CAACL,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAID,oBACE7D,OAAA;IAAK8D,SAAS,EAAC,KAAK;IAACC,KAAK,EAAE;MAACC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC/CjE,OAAA;MAAK8D,SAAS,EAAC,OAAO;MAAAG,QAAA,gBACpBjE,OAAA;QAAAiE,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBrE,OAAA;QAAK8D,SAAS,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIpB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNrE,OAAA,CAACP,QAAQ;MAACgB,KAAK,EAAEA,KAAM;MAACe,eAAe,EAAEA;IAAgB;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3D5D,KAAK,gBACJT,OAAA;MAAK8D,SAAS,EAAC,MAAM;MAAAG,QAAA,gBACnBjE,OAAA,CAACL,SAAS;QAAC2E,IAAI,EAAEnE,SAAU;QAACuB,aAAa,EAAEA;MAAc;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5DrE,OAAA,CAACN,QAAQ;QACPoE,SAAS,EAAC,UAAU;QACpBzD,QAAQ,EAAEA,QAAS;QACnBiE,IAAI,EAAEnE,SAAU;QAChB6B,kBAAkB,EAAEA,kBAAmB;QACvCxB,eAAe,EAAEA,eAAgB;QACjCD,YAAY,EAAEA,YAAa;QAC3BgE,WAAW,EAAEA,WAAY;QACzBnC,cAAc,EAAEA,cAAe;QAC/B3B,KAAK,EAAEA;MAAM;QAAAyD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC,GACJ,EAAE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnE,EAAA,CAnLQD,GAAG;AAAAuE,EAAA,GAAHvE,GAAG;AAqLZ,eAAeA,GAAG;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}