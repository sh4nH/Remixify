{"ast":null,"code":"var _jsxFileName = \"/home/shan/Desktop/TT/TopTunes/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState('');\n  useEffect(() => {\n    const hash = window.location.hash;\n    let token = window.localStorage.getItem('token');\n    if (!token && hash) {\n      token = hash.substring(1).split('&').find(elem => elem.startsWith('access_token')).split('=')[1];\n      window.location.hash = '';\n      window.localStorage.setItem('token', token);\n    }\n    setToken(token);\n  }, []);\n  const updateTracklist = array => {\n    setTracklist(array);\n  };\n  const addToPlaylist = newTrack => {\n    if (playlist.some(t => t.id === newTrack.id)) {} else {\n      setPlaylist(prev => [...prev, newTrack]);\n    }\n  };\n  const removeFromPlaylist = trackId => {\n    setPlaylist(prev => prev.filter(n => n.id !== trackId));\n  };\n  const createPlaylist = async (token, playlistName) => {\n    try {\n      const userResponse = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!userResponse.ok) {\n        throw new Error('Error fetching user information');\n      }\n      console.log(\"bruh\");\n      const userData = await userResponse.json();\n      const userId = userData.id;\n      let playlistId;\n      const createResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          description: 'New playlist created by app',\n          public: false\n        })\n      });\n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id;\n      let uriArray = playlist.map(track => track.uri);\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: uriArray,\n          position: 0\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error in adding tracks to the playlist. Network response was not ok');\n      }\n      setPlaylist([]);\n      setPlaylistName('');\n      alert(`Your playlist ${playlistName} was successfully created!`);\n      return addTracksResponse.json();\n    } catch (error) {\n      alert('Error in playlist creation');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      minHeight: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"TopTunes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TopSongs, {\n      token: token,\n      updateTracklist: updateTracklist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), token ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(Tracklist, {\n        data: tracklist,\n        addToPlaylist: addToPlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        className: \"flexItem\",\n        playlist: playlist,\n        removeFromPlaylist: removeFromPlaylist,\n        setPlaylistName: setPlaylistName,\n        playlistName: playlistName,\n        createPlaylist: playlistName => createPlaylist(token, playlistName)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1aEYMWF8SMI0RxgkiSV5GEecOtE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["TopSongs","Playlist","Tracklist","useState","useEffect","jsxDEV","_jsxDEV","App","_s","tracklist","setTracklist","playlist","setPlaylist","playlistName","setPlaylistName","token","setToken","hash","window","location","localStorage","getItem","substring","split","find","elem","startsWith","setItem","updateTracklist","array","addToPlaylist","newTrack","some","t","id","prev","removeFromPlaylist","trackId","filter","n","createPlaylist","userResponse","fetch","method","headers","Authorization","ok","Error","console","log","userData","json","userId","playlistId","createResponse","body","JSON","stringify","name","description","public","createJsonResponse","uriArray","map","track","uri","addTracksResponse","uris","position","alert","error","className","style","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/home/shan/Desktop/TT/TopTunes/src/App.js"],"sourcesContent":["import './App.css';\nimport TopSongs from './components/topsongs/TopSongs';\nimport Playlist from './components/playlist/Playlist';\nimport Tracklist from './components/tracklist/Tracklist';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [tracklist, setTracklist] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n  const [playlistName, setPlaylistName] = useState('');\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n    const hash = window.location.hash;\n    let token = window.localStorage.getItem('token');\n\n    if (!token && hash) {\n      token = hash\n        .substring(1)\n        .split('&')\n        .find((elem) => elem.startsWith('access_token'))\n        .split('=')[1];\n\n      window.location.hash = '';\n      window.localStorage.setItem('token', token);\n    }\n    setToken(token);\n  }, []);\n\n  const updateTracklist = (array) => {\n    setTracklist(array);\n  };\n\n  const addToPlaylist = (newTrack) => {\n    if (playlist.some((t) => t.id === newTrack.id)) {\n    } else {\n      setPlaylist((prev) => [...prev, newTrack]);\n    }\n  };\n\n  const removeFromPlaylist = (trackId) => {\n    setPlaylist((prev) => prev.filter((n) => n.id !== trackId));\n  };\n\n  const createPlaylist = async (token, playlistName) => {\n    try {\n      const userResponse = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!userResponse.ok) {\n        throw new Error('Error fetching user information');\n      }\n      console.log(\"bruh\")\n\n\n      const userData = await userResponse.json();\n      const userId = userData.id;\n\n      let playlistId;\n\n      const createResponse = await fetch(\n        `https://api.spotify.com/v1/users/${userId}/playlists`,\n        {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: playlistName,\n            description: 'New playlist created by app',\n            public: false,\n          }),\n        }\n      );\n\n      if (!createResponse.ok) {\n        throw new Error('Error in createPlaylist. Network response was not ok');\n      }\n\n      const createJsonResponse = await createResponse.json();\n      playlistId = createJsonResponse.id;\n\n      let uriArray = playlist.map((track) => track.uri);\n\n      const addTracksResponse = await fetch(\n        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n        {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            uris: uriArray,\n            position: 0,\n          }),\n        }\n      );\n\n      if (!addTracksResponse.ok) {\n        throw new Error(\n          'Error in adding tracks to the playlist. Network response was not ok'\n        );\n      }\n\n      setPlaylist([]);\n      setPlaylistName('');\n      alert(`Your playlist ${playlistName} was successfully created!`);\n\n      return addTracksResponse.json();\n    } catch (error) {\n      alert('Error in playlist creation');\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ minHeight: '100vh' }}>\n      <div className=\"title\">\n        <h1>TopTunes</h1>\n      </div>\n      <TopSongs token={token} updateTracklist={updateTracklist} />\n      {token ? (\n        <div className=\"flex\">\n          <Tracklist data={tracklist} addToPlaylist={addToPlaylist} />\n          <Playlist\n            className=\"flexItem\"\n            playlist={playlist}\n            removeFromPlaylist={removeFromPlaylist}\n            setPlaylistName={setPlaylistName}\n            playlistName={playlistName}\n            createPlaylist={(playlistName) =>\n              createPlaylist(token, playlistName)\n            }\n          />\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}