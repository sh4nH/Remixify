{"ast":null,"code":"var _jsxFileName = \"/home/shan/Desktop/TT/TopTunes/src/components/topsongs/TopSongs.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styles from './TopSongs.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopSongs = ({\n  token,\n  updateTracklist\n}) => {\n  _s();\n  // Define states\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Define variables for authentification\n  const CLIENT_ID = `${process.env.REACT_APP_CLIENT_ID}`;\n  const REDIRECT_URI = \"http://spotapify.netlify.app\";\n  const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\";\n  const RESPONSE_TYPE = \"token\";\n  const SCOPE = [\"playlist-modify-private\", \"playlist-modify-public\", \"user-library-modify\"];\n\n  // submit handler\n  const submitHandler = async e => {\n    // prevent reload after submission\n    e.preventDefault();\n\n    // get search results from API\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=track`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        localStorage.removeItem('token');\n        window.location.reload();\n        throw new Error(\"Network response was not ok\");\n      }\n\n      // grab data from response\n      const data = await response.json();\n\n      // grab tracks from data\n      const tracks = data.tracks.items;\n\n      // update tracklist with tracks from API request\n      updateTracklist(tracks);\n\n      // catch error\n    } catch (error) {\n      console.error(\"Error (TopSongs):\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.TopSongs,\n    children: !token ? /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${SCOPE}`,\n        children: \"Login to Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => setSearchTerm(e.target.value),\n        value: searchTerm,\n        name: \"searchTerm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"SEARCH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n_s(TopSongs, \"a1cMJ8t0eYFnsCEdGcHtaGJdbCM=\");\n_c = TopSongs;\nexport default TopSongs;\nvar _c;\n$RefreshReg$(_c, \"TopSongs\");","map":{"version":3,"names":["useState","styles","jsxDEV","_jsxDEV","TopSongs","token","updateTracklist","_s","searchTerm","setSearchTerm","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","REDIRECT_URI","AUTH_ENDPOINT","RESPONSE_TYPE","SCOPE","submitHandler","e","preventDefault","response","fetch","method","headers","Authorization","ok","localStorage","removeItem","window","location","reload","Error","data","json","tracks","items","error","console","className","children","href","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","target","value","name","type","_c","$RefreshReg$"],"sources":["/home/shan/Desktop/TT/TopTunes/src/components/topsongs/TopSongs.js"],"sourcesContent":["import { useState } from \"react\";\nimport styles from './TopSongs.module.css'\n\nconst TopSongs = ({ token, updateTracklist }) => {\n    // Define states\n    const [searchTerm, setSearchTerm] = useState('');\n\n    // Define variables for authentification\n    const CLIENT_ID = `${process.env.REACT_APP_CLIENT_ID}`\n    const REDIRECT_URI = \"http://spotapify.netlify.app\"\n    const AUTH_ENDPOINT = \"https://accounts.spotify.com/authorize\"\n    const RESPONSE_TYPE = \"token\"\n    const SCOPE = [\"playlist-modify-private\", \"playlist-modify-public\", \"user-library-modify\"];\n\n    // submit handler\n    const submitHandler = async (e) => {\n        // prevent reload after submission\n        e.preventDefault();\n\n        // get search results from API\n        try {\n            const response = await fetch(\n                `https://api.spotify.com/v1/search?q=${searchTerm}&type=track`,\n                {\n                method: \"GET\",\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n                }\n            );\n        \n          if (!response.ok) {\n            localStorage.removeItem('token');\n            window.location.reload();\n            throw new Error(\"Network response was not ok\");\n          }\n          \n            // grab data from response\n            const data = await response.json();\n\n            // grab tracks from data\n            const tracks = data.tracks.items;\n\n            // update tracklist with tracks from API request\n            updateTracklist(tracks);\n\n        // catch error\n        } catch (error) {\n          console.error(\"Error (TopSongs):\", error);\n        }\n      };\n      \n\n  return (\n      <div className={styles.TopSongs}>\n            {!token ? (\n              <button>\n                <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${SCOPE}`}>Login to Spotify</a>\n              </button>)\n              :\n              (\n                <form onSubmit={submitHandler}>\n                    <input onChange={(e) => setSearchTerm(e.target.value)} value={searchTerm} name='searchTerm' />\n                    <button type=\"submit\">SEARCH</button>\n                </form>\n            )} \n    </div>\n  )\n}\n\nexport default TopSongs;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}